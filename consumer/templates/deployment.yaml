apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-consumer
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-consumer
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-consumer
    spec:
      containers:
        - name: consumer
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: { { .Values.image.pullPolicy } }
          env:
            - name: RABBITMQ_HOST
              value: "{{ .Values.rabbitmq.host }}"
            - name: RABBITMQ_PORT
              value: "{{ .Values.rabbitmq.port }}"
            - name: RABBITMQ_USER
              value: "{{ .Values.rabbitmq.auth.username }}"
            - name: RABBITMQ_PASS
              #   value: "{{ .Values.rabbitmq.auth.password }}"
              valueFrom:
                secretKeyRef:
                  name: { { .Release.Name } }-rabbitmq
                  key: rabbitmq-password
            - name: QUEUE_NAME
              value: "{{ .Values.rabbitmq.queueName }}"
            - name: PRODUCER_INTERVAL
              value: "{{ .Values.env.messageIntervals }}"
        { { - if .Values.resources } }
          resources:
            { { - toYaml .Values.resources | nindent 12 } }
        { { - end } }
          ports:
            - containerPort: {{ .Values.consumer.metricsPort }}